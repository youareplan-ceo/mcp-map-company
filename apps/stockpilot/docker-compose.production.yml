# StockPilot 프로덕션 Docker Compose 설정
# 완전한 프로덕션 환경: Backend(FastAPI), Frontend(React 빌드), Redis, Nginx 리버스 프록시
# 보안 강화, 성능 최적화, 자동 스케일링, 모니터링 포함

version: '3.8'

services:
  # FastAPI Backend 메인 서버 (Uvicorn 프로덕션 모드)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        - PYTHON_VERSION=3.11
        - BUILD_ENV=production
    container_name: stockpilot_backend_prod
    ports:
      - "127.0.0.1:8000:8000"
    environment:
      - ENV=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=https://stockpilot.ai,https://www.stockpilot.ai
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - OPENAI_API_KEYS=${OPENAI_API_KEYS}
      - OPENAI_COST_LIMIT_DAILY=${OPENAI_COST_LIMIT_DAILY:-50.0}
      - OPENAI_KEY_ROTATION_ENABLED=${OPENAI_KEY_ROTATION_ENABLED:-true}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=30
      - POLYGON_API_KEY=${POLYGON_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - EMAIL_SMTP_SERVER=${EMAIL_SMTP_SERVER}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/data:/app/data
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - stockpilot_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    command: [
      "uvicorn", "main:app",
      "--host", "0.0.0.0",
      "--port", "8000",
      "--workers", "4",
      "--worker-class", "uvicorn.workers.UvicornWorker",
      "--access-log",
      "--log-config", "logging.conf"
    ]

  # React Frontend (정적 빌드, Nginx 서빙)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        - NODE_ENV=production
        - REACT_APP_API_URL=https://api.stockpilot.ai
        - REACT_APP_WS_URL=wss://api.stockpilot.ai/ws
        - REACT_APP_VERSION=${APP_VERSION:-1.0.0}
        - GENERATE_SOURCEMAP=false
    container_name: stockpilot_frontend_prod
    ports:
      - "127.0.0.1:3000:80"
    environment:
      - NODE_ENV=production
      - NGINX_ENTRYPOINT_QUIET_LOGS=1
    volumes:
      - ./frontend/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    networks:
      - stockpilot_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx 리버스 프록시 (프론트엔드 + 백엔드 통합)
  nginx:
    image: nginx:alpine
    container_name: stockpilot_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./nginx/error_pages:/usr/share/nginx/html/error_pages:ro
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
      - BACKEND_HOST=backend
      - BACKEND_PORT=8000
      - FRONTEND_HOST=frontend
      - FRONTEND_PORT=80
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - stockpilot_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # Redis 캐시 및 레이트 리미터
  redis:
    image: redis:7-alpine
    container_name: stockpilot_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    networks:
      - stockpilot_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # PostgreSQL 데이터베이스 (프로덕션 최적화)
  postgres:
    image: postgres:15-alpine
    container_name: stockpilot_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-stockpilot}
      POSTGRES_USER: ${POSTGRES_USER:-stockpilot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --encoding=UTF8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./postgres/backup:/backup
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:5432:5432"
    command: [
      "postgres",
      "-c", "config_file=/etc/postgresql/postgresql.conf"
    ]
    restart: unless-stopped
    networks:
      - stockpilot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-stockpilot} -d ${POSTGRES_DB:-stockpilot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # WebSocket 서버 (실시간 통신)
  websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile.websocket
    container_name: stockpilot_websocket_prod
    ports:
      - "127.0.0.1:8765:8765"
    environment:
      - ENV=production
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - BACKEND_API_URL=http://backend:8000
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - stockpilot_network
    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio, websockets; asyncio.run(websockets.connect('ws://localhost:8765/health'))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Celery 워커 (프로덕션)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: stockpilot_celery_worker_prod
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    volumes:
      - ./logs:/app/logs
      - ./ai_engine:/app/ai_engine:ro
    environment:
      - ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - stockpilot_network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'

  # Celery Beat (스케줄러)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: stockpilot_celery_beat_prod
    command: celery -A app.celery beat --loglevel=info
    volumes:
      - ./logs:/app/logs
    environment:
      - ENV=production
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - stockpilot_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # Prometheus 모니터링
  prometheus:
    image: prom/prometheus:latest
    container_name: stockpilot_prometheus_prod
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - stockpilot_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana 대시보드
  grafana:
    image: grafana/grafana:latest
    container_name: stockpilot_grafana_prod
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - stockpilot_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # Log aggregation (ELK Stack 대신 간단한 로그 수집)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: stockpilot_fluentd_prod
    volumes:
      - ./logs:/fluentd/log
      - ./monitoring/fluentd/conf:/fluentd/etc:ro
    ports:
      - "127.0.0.1:24224:24224"
    restart: unless-stopped
    networks:
      - stockpilot_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # 헬스 모니터 데몬 (상시 모니터링)
  health-monitor:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: health-monitor
    container_name: stockpilot_health_monitor_prod
    environment:
      - ENV=production
      - LOG_LEVEL=INFO
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-stockpilot}
      - POSTGRES_USER=${POSTGRES_USER:-stockpilot}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backend/logs:/app/logs
      - /tmp:/tmp
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      websocket-server:
        condition: service_healthy
      auth-api:
        condition: service_healthy
      dashboard-api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - stockpilot_network
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/tmp/stockpilot_health.json') else 1)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

# 네트워크 설정
networks:
  stockpilot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 볼륨 설정 (프로덕션)
volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/stockpilot/data/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/stockpilot/data/redis
  prometheus_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/stockpilot/data/prometheus
  grafana_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/stockpilot/data/grafana