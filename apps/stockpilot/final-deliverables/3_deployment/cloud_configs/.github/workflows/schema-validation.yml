name: Schema Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/schemas/**'
      - 'backend/scripts/validate_schemas.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/schemas/**'
      - 'backend/scripts/validate_schemas.py'

jobs:
  validate-schemas:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Validate WebSocket Schemas
      working-directory: backend
      run: |
        echo "🔍 Starting schema validation..."
        python scripts/validate_schemas.py
        
    - name: Check schema file size
      working-directory: backend
      run: |
        schema_size=$(stat -c%s "schemas/websocket-schemas.json")
        echo "Schema file size: $schema_size bytes"
        
        # 스키마 파일이 너무 크지 않은지 확인 (50KB 제한)
        if [ $schema_size -gt 51200 ]; then
          echo "❌ Schema file too large: $schema_size bytes (max: 51200)"
          exit 1
        fi
        
        echo "✅ Schema file size OK"
        
    - name: Validate JSON syntax
      working-directory: backend
      run: |
        echo "🔍 Validating JSON syntax..."
        python -m json.tool schemas/websocket-schemas.json > /dev/null
        echo "✅ JSON syntax valid"
        
    - name: Count message types
      working-directory: backend
      run: |
        echo "📊 Schema Statistics:"
        message_count=$(python -c "
        import json
        with open('schemas/websocket-schemas.json', 'r') as f:
            schema = json.load(f)
        print(len(schema.get('\$defs', {})))
        ")
        echo "  - Message types: $message_count"
        echo "  - Schema version: $(python -c "
        import json
        with open('schemas/websocket-schemas.json', 'r') as f:
            schema = json.load(f)
        print(schema.get('version', 'Unknown'))
        ")"
        
    - name: Summary
      if: success()
      run: |
        echo "🎉 All schema validation checks passed!"
        echo "✅ JSON syntax valid"
        echo "✅ Schema structure valid" 
        echo "✅ Message types valid"
        echo "✅ Enum values valid"
        echo "✅ Schema references valid"