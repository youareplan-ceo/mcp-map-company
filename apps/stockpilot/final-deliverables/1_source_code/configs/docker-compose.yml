version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: stockpilot_postgres
    environment:
      POSTGRES_DB: stockpilot_db
      POSTGRES_USER: stockpilot_user
      POSTGRES_PASSWORD: your_secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - stockpilot_network

  # Redis 캐시 및 메시지 브로커
  redis:
    image: redis:7-alpine
    container_name: stockpilot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - stockpilot_network

  # FastAPI 백엔드 서버
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: stockpilot_backend
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=stockpilot_db
      - DB_USER=stockpilot_user
      - DB_PASSWORD=your_secure_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./backend:/app
      - ./ai_engine:/app/ai_engine
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - stockpilot_network

  # React 프론트엔드
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stockpilot_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - stockpilot_network

  # Celery 워커 (백그라운드 작업 처리)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stockpilot_celery_worker
    command: celery -A app.celery worker --loglevel=info
    volumes:
      - ./backend:/app
      - ./ai_engine:/app/ai_engine
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=stockpilot_db
      - DB_USER=stockpilot_user
      - DB_PASSWORD=your_secure_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - stockpilot_network

  # Celery Beat (스케줄된 작업 관리)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stockpilot_celery_beat
    command: celery -A app.celery beat --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - stockpilot_network

  # Nginx 리버스 프록시 (프로덕션용)
  nginx:
    image: nginx:alpine
    container_name: stockpilot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - stockpilot_network
    profiles:
      - production

  # Prometheus 모니터링 (선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: stockpilot_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - stockpilot_network
    profiles:
      - monitoring

  # Grafana 대시보드 (선택사항)
  grafana:
    image: grafana/grafana:latest
    container_name: stockpilot_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - stockpilot_network
    profiles:
      - monitoring

# 네트워크 설정
networks:
  stockpilot_network:
    driver: bridge

# 볼륨 설정
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local